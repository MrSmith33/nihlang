# Repository permission needs `Read and write permissions` setting selected under `Workflow permissions` to allow to update/create new tag

name: CI
on:
  push: # test + build + release
    branches: [ master ]
  pull_request: # test + build
    branches: [ master ]
  release: # test + build + release
    types: [ published ]
env:
  DC: ldc-1.38.0

defaults:
  run:
    shell: bash

jobs:
  build_vanilla_d:
    name: Build vanilla D
    strategy:
      matrix:
        os: [ubuntu-latest, macos-12, windows-latest]
        build: [debug-fast, release-fast]
        config: [nih-cli, nih-static, nih-shared, vbe-static, vbe-shared]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: dlang-community/setup-dlang@v1
        with:
          compiler: ${{ env.DC }}
      - name: Build
        run: |
          ./build/setup.sh
          ./build/builder \
            --action=build \
            --remove-build \
            --build=${{matrix.build}} \
            --config=${{matrix.config}} \
            --compiler=ldc2 \
            --print-commands \
            --print-total-time \
            --print-callees \
            --pretty \
            --color
  build_no_deps:
    name: Build no deps
    strategy:
      matrix:
        os:
          - runner: ubuntu-latest
            target: linux
          - runner: ubuntu-latest
            target: wasm32-unknown
          - runner: ubuntu-latest
            target: wasm32-wasi
          - runner: macos-12
            target: macos
          - runner: windows-latest
            target: windows
        v:
          - build: debug-fast
            config: nih-cli,nih-static,nih-shared,vbe-static,vbe-shared
            action: pack
          - build: release-fast
            config: nih-cli,nih-static,nih-shared,vbe-static,vbe-shared
            action: pack
          - build: debug
            config: testsuite
            action: pack
          - build: debug
            config: testsuite
            action: run
    runs-on: ${{ matrix.os.runner }}
    steps:
      - uses: actions/checkout@v4
      - uses: dlang-community/setup-dlang@v1
        with:
          compiler: ${{ env.DC }}
      - uses: jcbhmr/setup-wasmtime@v2
        if: ${{ matrix.os.target }} == 'wasm32-wasi' && ${{ matrix.v.action }} == 'run'
      - name: Build
        run: |
          ./build/setup.sh
          ./build/builder \
            --action=${{ matrix.v.action }} \
            --remove-build \
            --no-deps \
            --build=${{ matrix.v.build }} \
            --target-relaxed=${{ matrix.os.target }} \
            --config=${{ matrix.v.config }} \
            --compiler=ldc2 \
            --print-commands \
            --print-total-time \
            --print-callees \
            --pretty \
            --color
      - uses: actions/upload-artifact@v4
        if: ${{ matrix.v.action }} == 'pack'
        with:
          name: artifact-${{ matrix.target }}-${{ matrix.v.build }}-${{ matrix.v.config }}
          path: bin/
  test:
    name: Test suite
    strategy:
      matrix:
        os: [ubuntu-latest, macos-12, windows-latest]
        include:
          - os: ubuntu-latest
            config: nih-cli
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: dlang-community/setup-dlang@v1
        with:
          compiler: ${{ env.DC }}
      - name: Test
        run: |
          ./build/setup.sh
          ./build/builder --action=run --remove-build --no-deps --build=debug --config=testsuite --compiler=ldc2 --print-commands --print-callees --pretty --color
  test-wasi:
    name: Test suite wasm32-wasi
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dlang-community/setup-dlang@v1
        with:
          compiler: ${{ env.DC }}
      - uses: jcbhmr/setup-wasmtime@v2
        if: ${{ matrix.target }} == 'wasm32-wasi'
      - name: Test
        run: |
          ./build/setup.sh
          ./build/builder --action=run --remove-build --no-deps --build=debug --target=wasm32-wasi --config=testsuite --compiler=ldc2 --print-commands --print-callees --pretty --color
  upload:
    name: Upload build
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    needs: [build_no_deps, test, test-wasi]
    steps:
      # Cloning is needed for `gh release create` to work. It looks repository up in .git folder
      - uses: actions/checkout@v4
      # Download build artifacts of other jobs
      - uses: actions/download-artifact@v4
        with:
          pattern: artifact-*
          merge-multiple: true
          path: bin/
      # Update tag, so that we get proper date and commit on github
      - name: Update CI tag
        uses: richardsimko/update-tag@v1.0.11
        if: github.ref == 'refs/heads/master'
        with:
          tag_name: CI
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # Create CI release and upload builds
      - name: Upload
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ls -R
          tag=`basename ${{ github.ref }}`
          if [ $tag = 'master' ]; then
            tag='CI'
          fi
          
          # --clobber Overwrite existing assets of the same name
          gh release upload $tag bin/*.zip --clobber
